#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Created on Wed Apr 29 12:03:32 2015

@author: agross
"""

import os
import math
import shutil

def copyTemplate(src, dest):
  """
  Copy src case to dest (dest is )
  """
  if str(dest).endswith("/"):
    destStr=str(dest)[:-1]
  else:
    destStr=str(dest)
  destPath,destFolder=os.path.split(destStr)
  if os.path.exists(dest):
    shutil.rmtree(dest)
  if not os.path.exists(destPath):
    os.makedirs(destPath)
  shutil.copytree(src,dest)
  os.makedirs(dest+"/constant/polyMesh")

def createSingleBlockMesh(casePath, ny, length):
  """
  Create a blockmesh under path from with given cell size ny and
  domain length and optional overlap = 3
  """

  delta=1.0/ny
  nx=int(math.ceil(length/delta))
  
  f = open(casePath+"constant/polyMesh/blockMeshDict",'w')
  
  f.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
  f.write("| =========                 |                                                 |\n")
  f.write("| \\\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
  f.write("|  \\\\    /   O peration     | Version:  2.3.0                                 |\n")
  f.write("|   \\\\  /    A nd           | Web:      www.OpenFOAM.org                      |\n")
  f.write("|    \\\\/     M anipulation  |                                                 |\n")
  f.write("\\*---------------------------------------------------------------------------*/\n")
  f.write("FoamFile\n")
  f.write("{\n")
  f.write("    version     2.0;\n")
  f.write("    format      ascii;\n")
  f.write("    class       dictionary;\n")
  f.write("    object      blockMeshDict;\n")
  f.write("}\n")
  f.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n")
  f.write("\n")
  f.write("convertToMeters 1;\n")
  f.write("\n")
  f.write("vertices\n")
  f.write("(\n")
  f.write("    (0 0 0) // 0\n")
  f.write("    ("+str(length)+" 0 0) // 1\n")
  f.write("    ("+str(length)+" 1 0) // 2\n")
  f.write("    (0 1 0) // 3\n")
  f.write("    (0 0 0.1) // 4\n")
  f.write("    ("+str(length)+" 0 0.1) // 5\n")
  f.write("    ("+str(length)+" 1 0.1) // 6\n")
  f.write("    (0 1 0.1) // 7\n")
  f.write(");\n")
  f.write("\n")
  f.write("blocks\n")
  f.write("(\n")
  f.write("    hex (0 1 2 3 4 5 6 7) upstream ("+str(nx)+" "+str(ny)+" 1) simpleGrading (1 1 1)\n")
  f.write(");\n")
  f.write("\n")
  f.write("edges\n")
  f.write("(\n")
  f.write(");\n")
  f.write("\n")
  f.write("boundary\n")
  f.write("(\n")
  f.write("    inlet\n")
  f.write("    {\n")
  f.write("        type            mappedPatch;\n")
  f.write("        sampleMode      nearestCell;\n")
  f.write("        offset          (2.4 0 0);\n")
  f.write("        faces\n")
  f.write("        (\n")
  f.write("            ( 0  4  7  3)\n")
  f.write("        );\n")
  f.write("    }\n")
  f.write("    outlet\n")
  f.write("    {\n")
  f.write("        type            patch;\n")
  f.write("        faces\n")
  f.write("        (\n")
  f.write("            ( 1  2  6  5)\n")
  f.write("        );\n")
  f.write("    }\n")
  f.write("    fixedWalls\n")
  f.write("    {\n")
  f.write("        type            wall;\n")
  f.write("        faces\n")
  f.write("        (\n")
  f.write("            ( 0  1  5  4)\n")
  f.write("            ( 7  6  2  3)\n")
  f.write("        );\n")
  f.write("    }\n")
  f.write("    frontAndBack\n")
  f.write("    {\n")
  f.write("        type empty;\n")
  f.write("        faces\n")
  f.write("        (\n")
  f.write("            ( 3  2  1  0)\n")
  f.write("            ( 4  5  6  7)\n")
  f.write("        );\n")
  f.write("    }\n")
  f.write(");\n")
  f.write("\n")
  f.write("mergePatchPairs\n")
  f.write("(\n")
  f.write(");\n")
  f.write("\n")
  f.write("// ************************************************************************* //\n")
  f.close()
  
  oldPath=os.getcwd()
  os.chdir(casePath)
  runApp("blockMesh")
  os.chdir(oldPath)


def createPerfectMatchBlockMesh(casePath, ny, length, overlap=3.0):
  """
  Create a blockmesh under path from with given cell size ny and
  domain length and optional overlap = 3
  """

  delta=1.0/ny
  nxUpstream=int(math.ceil(0.5/delta))
  interface1=nxUpstream*delta
  nxDownstream=int(math.ceil((length-interface1)/delta+overlap))
  interface2=interface1-overlap*delta
  outlet=interface2+nxDownstream*delta
  
  f = open(casePath+"constant/polyMesh/blockMeshDict",'w')
  
  f.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
  f.write("| =========                 |                                                 |\n")
  f.write("| \\\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
  f.write("|  \\\\    /   O peration     | Version:  2.3.0                                 |\n")
  f.write("|   \\\\  /    A nd           | Web:      www.OpenFOAM.org                      |\n")
  f.write("|    \\\\/     M anipulation  |                                                 |\n")
  f.write("\\*---------------------------------------------------------------------------*/\n")
  f.write("FoamFile\n")
  f.write("{\n")
  f.write("    version     2.0;\n")
  f.write("    format      ascii;\n")
  f.write("    class       dictionary;\n")
  f.write("    object      blockMeshDict;\n")
  f.write("}\n")
  f.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n")
  f.write("\n")
  f.write("convertToMeters 1;\n")
  f.write("\n")
  f.write("vertices\n")
  f.write("(\n")
  f.write("    (0 0 0) // 0\n")
  f.write("    ("+str(interface1)+" 0 0) // 1\n")
  f.write("    ("+str(interface1)+" 1 0) // 2\n")
  f.write("    (0 1 0) // 3\n")
  f.write("    (0 0 0.1) // 4\n")
  f.write("    ("+str(interface1)+" 0 0.1) // 5\n")
  f.write("    ("+str(interface1)+" 1 0.1) // 6\n")
  f.write("    (0 1 0.1) // 7\n")
  f.write("\n")
  f.write("    ("+str(interface2)+" 0 0) // 8\n")
  f.write("    ("+str(outlet)+" 0 0) // 9\n")
  f.write("    ("+str(outlet)+" 1 0) //10\n")
  f.write("    ("+str(interface2)+" 1 0) //11\n")
  f.write("    ("+str(interface2)+" 0 0.1) //12\n")
  f.write("    ("+str(outlet)+" 0 0.1) //13\n")
  f.write("    ("+str(outlet)+" 1 0.1) //14\n")
  f.write("    ("+str(interface2)+" 1 0.1) //15\n")
  f.write(");\n")
  f.write("\n")
  f.write("blocks\n")
  f.write("(\n")
  f.write("    hex (0 1 2 3 4 5 6 7) upstream ("+str(nxUpstream)+" "+str(ny)+" 1) simpleGrading (1 1 1)\n")
  f.write("    hex (8 9 10 11 12 13 14 15) downstream ("+str(nxDownstream)+" "+str(ny)+" 1) simpleGrading (1 1 1)\n")
  f.write(");\n")
  f.write("\n")
  f.write("edges\n")
  f.write("(\n")
  f.write(");\n")
  f.write("\n")
  f.write("boundary\n")
  f.write("(\n")
  f.write("    inlet\n")
  f.write("    {\n")
  f.write("        type            mappedPatch;\n")
  f.write("        sampleMode      nearestCell;\n")
  f.write("        offset          (2.4 0 0);\n")
  f.write("        faces\n")
  f.write("        (\n")
  f.write("            ( 0  4  7  3)\n")
  f.write("        );\n")
  f.write("    }\n")
  f.write("    outlet\n")
  f.write("    {\n")
  f.write("        type            patch;\n")
  f.write("        faces\n")
  f.write("        (\n")
  f.write("            ( 9 10 14 13)\n")
  f.write("        );\n")
  f.write("    }\n")
  f.write("    fixedWalls\n")
  f.write("    {\n")
  f.write("        type            wall;\n")
  f.write("        faces\n")
  f.write("        (\n")
  f.write("            ( 0  1  5  4)\n")
  f.write("            ( 7  6  2  3)\n")
  f.write("            ( 8  9 13 12)\n")
  f.write("            (15 14 10 11)\n")
  f.write("        );\n")
  f.write("    }\n")
  f.write("    upstream\n")
  f.write("    {\n")
  f.write("        type bellerophon;\n")
  f.write("        donorZone downstream;\n")
  f.write("        faces\n")
  f.write("        (\n")
  f.write("            ( 1  2  6  5)\n")
  f.write("        );\n")
  f.write("    }\n")
  f.write("    downstream\n")
  f.write("    {\n")
  f.write("        type bellerophon;\n")
  f.write("        donorZone upstream;\n")
  f.write("        faces\n")
  f.write("        (\n")
  f.write("            ( 8 12 15 11)\n")
  f.write("        );\n")
  f.write("    }\n")
  f.write("    frontAndBack\n")
  f.write("    {\n")
  f.write("        type empty;\n")
  f.write("        faces\n")
  f.write("        (\n")
  f.write("            ( 3  2  1  0)\n")
  f.write("            ( 4  5  6  7)\n")
  f.write("            (11 10  9  8)\n")
  f.write("            (12 13 14 15)\n")
  f.write("        );\n")
  f.write("    }\n")
  f.write(");\n")
  f.write("\n")
  f.write("mergePatchPairs\n")
  f.write("(\n")
  f.write(");\n")
  f.write("\n")
  f.write("// ************************************************************************* //\n")
  f.close()
  
  oldPath=os.getcwd()
  os.chdir(casePath)
  runApp("blockMesh")
  os.chdir(oldPath)


def createShiftedBlockMesh(casePath, ny, length, horizontalShift=2.51, verticalShift=0.5):
  """
  Create a blockmesh under path with given cell size ny and
  domain length and shift in vertical and horizontal direction
  """

  delta=1.0/ny
  nxUpstream=int(math.ceil(0.5/delta))
  interface1=nxUpstream*delta
  nxDownstream=int(math.ceil((length-interface1)/delta+horizontalShift))
  interface2=interface1-horizontalShift*delta
  outlet=interface2+nxDownstream*delta
  yLower=verticalShift*delta
  yUpper=1.0-verticalShift*delta
  
  f = open(casePath+"constant/polyMesh/blockMeshDict",'w')
  
  f.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
  f.write("| =========                 |                                                 |\n")
  f.write("| \\\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
  f.write("|  \\\\    /   O peration     | Version:  2.3.0                                 |\n")
  f.write("|   \\\\  /    A nd           | Web:      www.OpenFOAM.org                      |\n")
  f.write("|    \\\\/     M anipulation  |                                                 |\n")
  f.write("\\*---------------------------------------------------------------------------*/\n")
  f.write("FoamFile\n")
  f.write("{\n")
  f.write("    version     2.0;\n")
  f.write("    format      ascii;\n")
  f.write("    class       dictionary;\n")
  f.write("    object      blockMeshDict;\n")
  f.write("}\n")
  f.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n")
  f.write("\n")
  f.write("convertToMeters 1;\n")
  f.write("\n")
  f.write("vertices\n")
  f.write("(\n")
  f.write("    (0 0 0) // 0\n")
  f.write("    ("+str(interface1)+" 0 0) // 1\n")
  f.write("    ("+str(interface1)+" 1 0) // 2\n")
  f.write("    (0 1 0) // 3\n")
  f.write("    (0 0 0.1) // 4\n")
  f.write("    ("+str(interface1)+" 0 0.1) // 5\n")
  f.write("    ("+str(interface1)+" 1 0.1) // 6\n")
  f.write("    (0 1 0.1) // 7\n")
  f.write("\n")
  f.write("    ("+str(interface2)+" 0 0) // 8\n")
  f.write("    ("+str(outlet)+" 0 0) // 9\n")
  f.write("    ("+str(outlet)+" "+str(yLower)+" 0) //10\n")
  f.write("    ("+str(interface2)+" "+str(yLower)+" 0) //11\n")
  f.write("    ("+str(interface2)+" 0 0.1) //12\n")
  f.write("    ("+str(outlet)+" 0 0.1) //13\n")
  f.write("    ("+str(outlet)+" "+str(yLower)+" 0.1) //14\n")
  f.write("    ("+str(interface2)+" "+str(yLower)+" 0.1) //15\n")
  f.write("\n")
  f.write("    ("+str(interface2)+" "+str(yUpper)+" 0) //16\n")
  f.write("    ("+str(outlet)+" "+str(yUpper)+" 0) //17\n")
  f.write("    ("+str(interface2)+" "+str(yUpper)+" 0.1) //18\n")
  f.write("    ("+str(outlet)+" "+str(yUpper)+" 0.1) //19\n")
  f.write("\n")
  f.write("    ("+str(interface2)+" 1 0) //20\n")
  f.write("    ("+str(outlet)+" 1 0) //21\n")
  f.write("    ("+str(interface2)+" 1 0.1) //22\n")
  f.write("    ("+str(outlet)+" 1 0.1) //23\n")
  f.write(");\n")
  f.write("\n")
  f.write("blocks\n")
  f.write("(\n")
  f.write("    hex ( 0  1  2  3  4  5  6  7) upstream ("+str(nxUpstream)+" "+str(ny)+" 1) simpleGrading (1 1 1)\n")
  f.write("    hex ( 8  9 10 11 12 13 14 15) downstream ("+str(nxDownstream)+" 1 1) simpleGrading (1 1 1)\n")
  f.write("    hex (11 10 17 16 15 14 19 18) downstream ("+str(nxDownstream)+" "+str(ny-1)+" 1) simpleGrading (1 1 1)\n")
  f.write("    hex (16 17 21 20 18 19 23 22) downstream ("+str(nxDownstream)+" 1 1) simpleGrading (1 1 1)\n")
  f.write(");\n")
  f.write("\n")
  f.write("edges\n")
  f.write("(\n")
  f.write(");\n")
  f.write("\n")
  f.write("boundary\n")
  f.write("(\n")
  f.write("    inlet\n")
  f.write("    {\n")
  f.write("        type            mappedPatch;\n")
  f.write("        sampleMode      nearestCell;\n")
  f.write("        offset          (2.4 0 0);\n")
  f.write("        faces\n")
  f.write("        (\n")
  f.write("            ( 0  4  7  3)\n")
  f.write("        );\n")
  f.write("    }\n")
  f.write("    outlet\n")
  f.write("    {\n")
  f.write("        type            patch;\n")
  f.write("        faces\n")
  f.write("        (\n")
  f.write("            ( 9 10 14 13)\n")
  f.write("            (10 17 19 14)\n")
  f.write("            (17 21 23 19)\n")
  f.write("        );\n")
  f.write("    }\n")
  f.write("    fixedWalls\n")
  f.write("    {\n")
  f.write("        type            wall;\n")
  f.write("        faces\n")
  f.write("        (\n")
  f.write("            ( 0  1  5  4)\n")
  f.write("            ( 7  6  2  3)\n")
  f.write("            ( 8  9 13 12)\n")
  f.write("            (21 20 22 23)\n")
  f.write("        );\n")
  f.write("    }\n")
  f.write("    upstream\n")
  f.write("    {\n")
  f.write("        type bellerophon;\n")
  f.write("        donorZone downstream;\n")
  f.write("        faces\n")
  f.write("        (\n")
  f.write("            ( 1  2  6  5)\n")
  f.write("        );\n")
  f.write("    }\n")
  f.write("    downstream\n")
  f.write("    {\n")
  f.write("        type bellerophon;\n")
  f.write("        donorZone upstream;\n")
  f.write("        faces\n")
  f.write("        (\n")
  f.write("            ( 8 12 15 11)\n")
  f.write("            (11 15 18 16)\n")
  f.write("            (16 18 22 20)\n")
  f.write("        );\n")
  f.write("    }\n")
  f.write("    frontAndBack\n")
  f.write("    {\n")
  f.write("        type empty;\n")
  f.write("        faces\n")
  f.write("        (\n")
  f.write("            ( 3  2  1  0)\n")
  f.write("            ( 4  5  6  7)\n")
  f.write("            (11 10  9  8)\n")
  f.write("            (10 11 16 17)\n")
  f.write("            (17 16 20 21)\n")
  f.write("            (12 13 14 15)\n")
  f.write("            (15 14 19 18)\n")
  f.write("            (18 19 23 22)\n")
  f.write("        );\n")
  f.write("    }\n")
  f.write(");\n")
  f.write("\n")
  f.write("mergePatchPairs\n")
  f.write("(\n")
  f.write(");\n")
  f.write("\n")
  f.write("// ************************************************************************* //\n")
  f.close()

  oldPath=os.getcwd()
  os.chdir(casePath)
  runApp("blockMesh")
  os.chdir(oldPath)



def createUnstructured3DTriMeshes(casePath, ny, length):
  """
  Create unstructured meshes (tri and poly) und case/tri_Nny and case/poly_Nny
  from template and given size and length
  """
  delta=1.0/ny
  height=20.0*delta
  upstream=0.5+delta
  downstream=upstream-5.0*delta

  f=open(casePath+"mesh.geo", 'w')
  f.write("// Define parameters\n")
  f.write("delta="+str(delta)+";\n")
  f.write("upstream = "+str(upstream)+";\n")
  f.write("downstream = "+str(downstream)+";\n")
  f.write("length = "+str(length)+";\n")
  f.write("height = "+str(-height)+";\n")
  f.write("\n")
  f.write("// Create points\n")
  f.write("//\n")
  f.write("//      8 _________________ 7\n")
  f.write("//      /|                /|\n")
  f.write("//     / |               / |\n")
  f.write("//    /  |              /  |\n")
  f.write("// 4 /___|___________3_/   |\n")
  f.write("//   |   |             |   |\n")
  f.write("//   |   |             |   |\n")
  f.write("//   |   | 5           |   |\n")
  f.write("//   |   |_____________|___| 6\n")
  f.write("//   |  /              |  /\n")
  f.write("//   | /               | /\n")
  f.write("//   |/________________|/\n")
  f.write("//  1                   2\n")
  f.write("\n")
  f.write("Point(1) = {0         , 0, 0     , delta};\n")
  f.write("Point(2) = {upstream  , 0, 0     , delta};\n")
  f.write("Point(3) = {upstream  , 1, 0     , delta};\n")
  f.write("Point(4) = {0         , 1, 0     , delta};\n")
  f.write("Point(5) = {0         , 0, height, delta};\n")
  f.write("Point(6) = {upstream  , 0, height, delta};\n")
  f.write("Point(7) = {upstream  , 1, height, delta};\n")
  f.write("Point(8) = {0         , 1, height, delta};\n")
  f.write("\n")
  f.write("Point(11) = {downstream, 0, 0     , delta};\n")
  f.write("Point(12) = {length    , 0, 0     , delta};\n")
  f.write("Point(13) = {length    , 1, 0     , delta};\n")
  f.write("Point(14) = {downstream, 1, 0     , delta};\n")
  f.write("Point(15) = {downstream, 0, height, delta};\n")
  f.write("Point(16) = {length    , 0, height, delta};\n")
  f.write("Point(17) = {length    , 1, height, delta};\n")
  f.write("Point(18) = {downstream, 1, height, delta};\n")
  f.write("\n")
  f.write("// Create lines\n")
  f.write("// (Facing in direction of dashes)\n")
  f.write("//\n")
  f.write("//        _________________  \n")
  f.write("//      /|        -7      /|\n")
  f.write("//   / / |             / / |\n")
  f.write("//  12/  |            11/  ||\n")
  f.write("//   /___|____-3_______/   |6\n")
  f.write("//   |   |             |   |\n")
  f.write("//   |   |8           ||   |\n")
  f.write("//  4|   ||           2|   |\n")
  f.write("//  ||   |_____________|___|  \n")
  f.write("//   |  //     5-      |  / /\n")
  f.write("//   | /9              | /10\n")
  f.write("//   |/________________|/\n")
  f.write("//           1- \n")
  f.write("\n")
  f.write("Line(1)  = {1 , 2};\n")
  f.write("Line(2)  = {2 , 3};\n")
  f.write("Line(3)  = {3 , 4};\n")
  f.write("Line(4)  = {4 , 1};\n")
  f.write("Line(5)  = {5 , 6};\n")
  f.write("Line(6)  = {6 , 7};\n")
  f.write("Line(7)  = {7 , 8};\n")
  f.write("Line(8)  = {8 , 5};\n")
  f.write("Line(9)  = {1 , 5};\n")
  f.write("Line(10) = {2 , 6};\n")
  f.write("Line(11) = {3 , 7};\n")
  f.write("Line(12) = {4 , 8};\n")
  f.write("\n")
  f.write("Line(21) = {11, 12};\n")
  f.write("Line(22) = {12, 13};\n")
  f.write("Line(23) = {13, 14};\n")
  f.write("Line(24) = {14, 11};\n")
  f.write("Line(25) = {15, 16};\n")
  f.write("Line(26) = {16, 17};\n")
  f.write("Line(27) = {17, 18};\n")
  f.write("Line(28) = {18, 15};\n")
  f.write("Line(29) = {11, 15};\n")
  f.write("Line(30) = {12, 16};\n")
  f.write("Line(31) = {13, 17};\n")
  f.write("Line(32) = {14, 18};\n")
  f.write("\n")
  f.write("// Create line loops\n")
  f.write("\n")
  f.write("Line Loop(41) = {12, 8, -9, -4};\n")
  f.write("Line Loop(42) = {6, -11, -2, 10};\n")
  f.write("Line Loop(43) = {9, 5, -10, -1};\n")
  f.write("Line Loop(44) = {-3, 11, 7, -12};\n")
  f.write("Line Loop(45) = {1, 2, 3, 4};\n")
  f.write("Line Loop(46) = {8, 7, 6, 5};\n")
  f.write("\n")
  f.write("Line Loop(51) = {32, 28, -29, -24};\n")
  f.write("Line Loop(52) = {26, -31, -22, 30};\n")
  f.write("Line Loop(53) = {29, 25, -30, -21};\n")
  f.write("Line Loop(54) = {-23, 31, 27, -32};\n")
  f.write("Line Loop(55) = {21, 22, 23, 24};\n")
  f.write("Line Loop(56) = {28, 27, 26, 25};\n")
  f.write("\n")
  f.write("// Create surfaces\n")
  f.write("//\n")
  f.write("//        _________________  \n")
  f.write("//      /|                /|\n")
  f.write("//     / |       4       / |\n")
  f.write("//    /  |              /  |\n")
  f.write("//   /___|_____________/   |\n")
  f.write("//   |   |        6    |   |\n")
  f.write("//   | 1 |             | 2 |\n")
  f.write("//   |   |   5         |   |\n")
  f.write("//   |   |_____________|___|  \n")
  f.write("//   |  /              |  /\n")
  f.write("//   | /       3       | /\n")
  f.write("//   |/________________|/\n")
  f.write("\n")
  f.write("Plane Surface(1) = {41};\n")
  f.write("Plane Surface(2) = {42};\n")
  f.write("Plane Surface(3) = {43};\n")
  f.write("Plane Surface(4) = {44};\n")
  f.write("Plane Surface(5) = {45};\n")
  f.write("Plane Surface(6) = {46};\n")
  f.write("\n")
  f.write("Plane Surface(11) = {51};\n")
  f.write("Plane Surface(12) = {52};\n")
  f.write("Plane Surface(13) = {53};\n")
  f.write("Plane Surface(14) = {54};\n")
  f.write("Plane Surface(15) = {55};\n")
  f.write("Plane Surface(16) = {56};\n")
  f.write("\n")
  f.write("// Create boundaries\n")
  f.write("// 1. inlet\n")
  f.write("// 2. upstream\n")
  f.write("// 3. downstream\n")
  f.write("// 4. outlet\n")
  f.write("// 5. fixedWalls\n")
  f.write("// 6. frontAndBack\n")
  f.write("\n")
  f.write("Physical Surface(\"inlet\") = {1};\n")
  f.write("Physical Surface(\"upstream\") = {2};\n")
  f.write("Physical Surface(\"dummy\") = {11};\n")
  f.write("Physical Surface(\"outlet\") = {12};\n")
  f.write("Physical Surface(\"fixedWalls\") = {3, 4, 13, 14};\n")
  f.write("Physical Surface(\"frontAndBack\") = {5, 15};\n")
  f.write("Physical Surface(\"unused\") = {6, 16};\n")
  f.write("\n")
  f.write("// Create volumes\n")
  f.write("\n")
  f.write("Surface Loop(31) = {1, 2, 3, 4, 5, 6};\n")
  f.write("Surface Loop(32) = {11, 12, 13, 14, 15, 16};\n")
  f.write("\n")
  f.write("Volume(1) = {31};\n")
  f.write("Volume(2) = {32};\n")
  f.write("\n")
  f.write("Physical Volume(\"upstream\") = {1};\n")
  f.write("Physical Volume(\"downstream\") = {2};\n")
  f.write("\n")
  f.close()

  oldPath=os.getcwd()
  os.chdir(casePath)
  runApp("gmsh","-3 mesh.geo")
  runApp("gmshToFoam","mesh.msh")
  os.remove(casePath+"mesh.geo")
  os.remove(casePath+"mesh.msh")
  os.system("sed -i 's/INTERFACE1/"+str(upstream)+"/' system/topoSetDict")
  os.chdir(oldPath)


def extractScalarConservation(caseDir,postFile,massE,ny):
  """
  Extract scalar conservation properties for given case, file for results and
  analytical mass
  """
  f = open(caseDir+"postProcessing/massUpstream/0/cellSource.dat")

  # skip first there lines
  l = f.readline()
  while l[0] == "#":
    l=f.readline()
  
  mass0 = float(l.split()[1])
  
  f.close()
  
  f=open(caseDir+"postProcessing/massDownstream/0/cellSource.dat")
  f.seek(-2,2)
  while f.read(1) != "\n":
    f.seek(-2,1)
  massN = float(f.readline().split()[1])
  
  if os.path.isfile(postFile):
    result = open(postFile,'a')
  else:
    result = open(postFile,'w')
    result.write("#ny\terror[%]\n")

  result.write(str(ny)+"\t"+str(100.0*(massN-mass0)/massE)+"\n")
  result.close()


def extractFluxConservation(caseName, logName, resultName):
  """
  Extract flux conservation error from caseName/logFile and write it to
  resultName
  """
  logFile = open(caseName+"/"+logName,'r')
  resultFile = open(resultName,'w')
  resultFile.write("#time\terror_0\terror_1\t...")
  for line in logFile:
     if line.startswith("Time = "):
       t = line.split()[2]
       resultFile.write("\n"+t)
     elif line.startswith("Interface error : "):
       lineArray=line.split()
       if len(lineArray) is not 6:
         print("Error line doesn't match: "+line)
         raise ValueError
       else:
         resultFile.write("\t"+str(float(lineArray[3])/float(lineArray[5])))
  logFile.close()
  resultFile.close()
  
def caseName(method,nCells,scheme = None):
  """
  return case name from interpolation method, number of cells and optional
  interpolation scheme
  """
  name = "_".join((method+"_"+"N"+str(int(nCells))).split())
  if scheme is not None:
    name = name + "_"+"_".join(scheme.split())
  return name

def runApp(appName, flags="", log=True):
  """
  Run appName with flags and log to log.appName
  """
  if log:
    print("  Running "+appName)
    os.system(appName+" "+flags+" 2>&1 > log."+appName)
  else:
    os.system(appName+" "+flags)

def runAppParallel(appName, nProcs, flags="", log=True):
  """
  Run appName with flags and log to log.appName
  """
  if log:
    print("  Running "+appName+" on "+str(nProcs)+" procs")
    os.system("mpirun -np "+str(nProcs)+" "+appName+" "+flags+" 2>&1 > log."+appName)
  else:
    os.system("mpirun -np "+str(nProcs)+" "+appName+" "+flags)
